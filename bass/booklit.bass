(def *memos* *dir*/bass.lock)

(use (.git (linux/alpine/git)))

(provide [tests
          build build-all]
  (defn with-go-cache [thk]
    (with-mount thk (cache-dir "booklit-go-cache") /go/))

  (defn tests [src & testflags]
    (from (linux/golang)
      (cd src
        (with-go-cache ($ go install -mod=mod "github.com/onsi/ginkgo/v2/ginkgo"))
        (with-go-cache ($ ./scripts/test -p & $testflags)))))

  (defn filename [os arch]
    (let [ext (if (= os "windows") ".exe" "")
          fname (str "booklit_" os "_" arch ext)]
      (string->fs-path fname)))

  (defn build [src version os arch]
    (let [exe (filename os arch)]
      (-> ($ go build
             -o (subpath ../ exe)
             --ldflags (str "-X github.com/vito/booklit.Version=" version)
             ./cmd/booklit)
          with-go-cache
          (with-env {:GOOS os :GOARCH arch})
          (with-dir src)
          (with-image (linux/golang))
          (subpath exe))))

  (defn build-all [src version]
    {:linux (build src version "linux" "amd64")
     :darwin (build src version "darwin" "amd64")
     :windows (build src version "windows" "amd64")}))

(defn release-info [version]
  (let [version-dir (string->dir version)
        info (git:github/vito/booklit/ref/version/ version-dir)]
    {:title (trim (next (read info/name :raw)))
     :notes info/notes.md}))
